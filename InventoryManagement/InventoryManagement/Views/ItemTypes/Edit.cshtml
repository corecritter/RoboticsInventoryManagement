@model InventoryManagement.Models.ItemTypesViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>ItemTypes</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ItemTypeModel.ItemTypeId)

        <div class="form-group">
            @Html.LabelFor(model => model.ItemTypeModel.ItemName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ItemTypeModel.ItemName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ItemTypeModel.ItemName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ItemTypeModel.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ItemTypeModel.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ItemTypeModel.Quantity, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.ActionLink("Add Item", "AddItem", new { itemTypeId = Model.ItemTypeModel.ItemTypeId })
        @if (Model.ItemTypeModel.HasLabel)
        {
            <div class="form-group">
            
                @for (int i = 0; i < Model.ItemTypeModel.Item.Count(); i++)
                {
                    @Html.HiddenFor(model => model.ItemTypeModel.Item[i].ItemTypeId)
                    @Html.HiddenFor(model => model.ItemTypeModel.Item[i].ItemId)
                    <div class="form-group">
                        @Html.LabelFor(model => model.InventoryLocations, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.ItemTypeModel.Item[i].InventoryLocationId, Model.InventoryLocations[i], new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Labels, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.ItemTypeModel.Item[i].LabelId, Model.Labels[i], new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ActionLink("Delete", "DeleteItem", new { itemId = Model.ItemTypeModel.Item[i].ItemId })
                    </div>
                }
            </div>
        }
        else
        {
            <div class="form-group">
                @for (int i = 0; i < Model.ItemTypeModel.Item.Count(); i++)
                {
                    @Html.HiddenFor(model => model.ItemTypeModel.Item[i].ItemTypeId)
                    @Html.HiddenFor(model => model.ItemTypeModel.Item[i].ItemId)
                    @Html.LabelFor(model => model.InventoryLocations)
                    @Html.DropDownListFor(model => model.ItemTypeModel.Item[i].InventoryLocationId, Model.InventoryLocations[i])
                    @Html.ActionLink("Delete", "DeleteItem", new { itemId = Model.ItemTypeModel.Item[i].ItemId })
                    <br />
                }
            </div>
        }
        


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
